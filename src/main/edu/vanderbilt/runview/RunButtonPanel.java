//--//--//--//--//--//--//
//
//   Copyright 2014  
//   Mind, Matter & Media Lab, Vanderbilt University.
//   This is a source file for the ViMAP open source project.
//   Principal Investigator: Pratim Sengupta 
//   Lead Developer: Mason Wright
//   
//   Simulations powered by NetLogo. 
//   The copyright information for NetLogo can be found here: 
//   https://ccl.northwestern.edu/netlogo/docs/copyright.html  
//
//--//--//--//--//--//--// 


package edu.vanderbilt.runview;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Hashtable;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import edu.vanderbilt.runcontroller.RunController;


/**
 * This panel holds buttons for starting and stopping a run of the user's code.
 * It handles the events generated by those buttons, 
 * calling the executor as needed.
 */
public final class RunButtonPanel extends JPanel implements ActionListener {

    private static final long serialVersionUID = -3544775395642784381L;
    
    // called to start or stop a run
    private RunController runController; 
    
    // used to decide how many cycles to run in "Go"
    private JSlider runCountSlider;
    
    // used to decide whether to highlight code
    private JCheckBox highlightBox; 
    
    // used to reset the model without running setup code
    // private JButton resetButton;
    
    // used to set up the model
    private JButton setupButton; 
    
    // used to run the model
    private JButton runButton;
    
    // used to stop a run
    private JButton stopButton; 
    
    // used to hold the buttons
    private final JPanel buttonPanel; 
    
    // used to hold checkboxes
    private final JPanel checkboxPanel;
    
    // text for highlight checkbox
    private static final String HIGHLIGHT_STRING = "Highlight";
    
    // text for reset button
    private static final String RESET_STRING = "Reset";
    
    // text for the setup button
    private static final String SETUP_STRING = "Setup"; 

    // text for the run button
    // private static final String RUN_STRING = "Run"; 
    private static final String RUN_STRING = "Go";
    
    // text for stop button
    private static final String STOP_STRING = "Stop";
    
    private final int minSliderNumber = 1;
    private final int maxSliderNumber = 4;
    private final int[] sliderValues = {1, 10, 100};
    
    private static void addWidthSpacer(final JPanel panel) {
        final int spacerWidth = 10;
        final int smallHeight = 2;
        panel.add(Box.createRigidArea(new Dimension(spacerWidth, smallHeight)));
    }
    
    private static void addHeightSpacer(final JPanel panel) {
        final int spacerHeight = 10;
        final int smallWidth = 2;
        panel.add(Box.createRigidArea(new Dimension(smallWidth, spacerHeight)));
    }
    
    /**
     * Constructor.
     */
    public RunButtonPanel() {
        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        
        assert SwingUtilities.isEventDispatchThread();
        this.buttonPanel = new JPanel();
        this.buttonPanel.setLayout(
            new BoxLayout(this.buttonPanel, BoxLayout.X_AXIS)
        );
        
        this.checkboxPanel = new JPanel();
        this.checkboxPanel.setLayout(
            new BoxLayout(this.checkboxPanel, BoxLayout.X_AXIS)
        );
        
        this.highlightBox = addCheckbox(HIGHLIGHT_STRING);
        this.highlightBox.setToolTipText("Highlight code as it runs");
        this.highlightBox.setSelected(true);
        addWidthSpacer(this.buttonPanel);
        
        // this.resetButton = addButton(RESET_STRING);
        // this.resetButton.setToolTipText("Reset without running \"setup\"");
        this.setupButton = addButton(SETUP_STRING);
        this.setupButton.setToolTipText("Execute \"setup\" method");
        addWidthSpacer(this.buttonPanel);
        this.runButton = addButton(RUN_STRING);
        this.runButton.setToolTipText("Execute \"go\" method");
        addWidthSpacer(this.buttonPanel);

        setupRunCountSlider();
        addWidthSpacer(this.buttonPanel);
        
        this.stopButton = addButton(STOP_STRING);
        this.stopButton.setToolTipText("Stop running code");
                
        this.add(this.buttonPanel);    
        addHeightSpacer(this);
        this.add(this.checkboxPanel);
    }
    
    private void setupRunCountSlider() {
        if (this.runCountSlider != null) {
            return;
        }
        
        final int initial = maxSliderNumber;
        this.runCountSlider = new JSlider(
                SwingConstants.HORIZONTAL,
                minSliderNumber, 
                maxSliderNumber, 
                initial
           );
        this.runCountSlider.setToolTipText("How many times to run code");
        this.runCountSlider.setSnapToTicks(true);
        this.runCountSlider.setMajorTickSpacing(1);
        this.runCountSlider.setPaintTicks(true);
        this.buttonPanel.add(this.runCountSlider); 
                
        final Hashtable<Integer, JLabel> labelTable = 
            new Hashtable<Integer, JLabel>();
        int i = minSliderNumber;
        labelTable.put(i, new JLabel("" + sliderValues[0]));
        i++;
        labelTable.put(i, new JLabel("" + sliderValues[1]));
        i++;
        labelTable.put(i, new JLabel("" + sliderValues[2]));
        labelTable.put(maxSliderNumber, new JLabel("Forever"));
        this.runCountSlider.setLabelTable(labelTable);
        this.runCountSlider.setPaintLabels(true);
        
        final int sliderWidth = 150;
        this.runCountSlider.setMaximumSize(
            new Dimension(
                sliderWidth, 
                (int) this.runCountSlider.getPreferredSize().getHeight()
            )
        );
    }
    
    /*
    private void setupRunCountSlider() {
        if (this.runCountSlider != null) {
            return;
        }
        
        final int initialNumber = 50;
        this.runCountSlider = new JSlider(
                SwingConstants.HORIZONTAL,
                minSliderNumber, 
                maxSliderNumber, 
                initialNumber
           );
        this.runCountSlider.setToolTipText("How many times to run code");
        final int majorTickSpacing = 50;
        this.runCountSlider.setMajorTickSpacing(majorTickSpacing);
        this.runCountSlider.setPaintTicks(true);
        this.buttonPanel.add(this.runCountSlider);        
        setupSliderLabels();
        
        final int sliderWidth = 150;
        this.runCountSlider.setMaximumSize(
            new Dimension(
                sliderWidth, 
                (int) this.runCountSlider.getPreferredSize().getHeight()
            )
        );
    }
    
    private void setupSliderLabels() {
        final Hashtable<Integer, JLabel> labelTable = 
            new Hashtable<Integer, JLabel>();
        labelTable.put(minSliderNumber, new JLabel("" + minSliderNumber));
        labelTable.put(
            maxSliderNumber / 2, 
            new JLabel("" + (maxSliderNumber / 2))
        );
        labelTable.put(maxSliderNumber, new JLabel("" + maxSliderNumber));
        this.runCountSlider.setLabelTable(labelTable);
        this.runCountSlider.setPaintLabels(true);
    }
    */
    
    public void setExecutor(final RunController aRunController) {
        this.runController = aRunController;
    }
    
    public void disbaleAll() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                getStopButton().setEnabled(false);
                
                getHighlightBox().setEnabled(false);
                // getResetButton().setEnabled(false);
                getSetupButton().setEnabled(false);
                getRunButton().setEnabled(false);
                getRunCountSlider().setEnabled(false);
            }
         });
    }
    
    /**
     * Enables stop button, disabling others. May be called at start of a run.
     */
    public void enableStopDisableOthers() {
        SwingUtilities.invokeLater(new Runnable() {
           @Override
           public void run() {
               getStopButton().setEnabled(true);
               
               getHighlightBox().setEnabled(false);
               // getResetButton().setEnabled(false);
               getSetupButton().setEnabled(false);
               getRunButton().setEnabled(false);
               getRunCountSlider().setEnabled(false);
           }
        });
    }
    
    
    /**
     * Disables stop button, enabling others. May be called at end of a run.
     */
    public void disableStopEnableOthers() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                getStopButton().setEnabled(false);
                
                getHighlightBox().setEnabled(true);
                // getResetButton().setEnabled(true);
                getSetupButton().setEnabled(true);
                getRunButton().setEnabled(true);
                getRunCountSlider().setEnabled(true);
            }
         });
    }
    
    public boolean isForeverFromSliderPosition(final int number) {
        if (number < minSliderNumber || number > maxSliderNumber) {
            throw new IllegalArgumentException();
        }
        return number == maxSliderNumber;
    }
    
    public int valueFromSliderPosition(final int number) {
        if (number < minSliderNumber || number >= maxSliderNumber) {
            throw new IllegalArgumentException();
        }
        
        return sliderValues[number - 1];
    }
    
    
    /**
     * Handles clicks on the buttons
     */
    @Override
    public void actionPerformed(final ActionEvent event) {    
        
        // if the reset button is clicked
        if (event.getActionCommand().equals(RESET_STRING)) {
            
            final SwingWorker<Void, Void> worker = 
                new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() {
                    // setup and stop
                    getRunController().run(
                        false,
                        false,
                        false,
                        1,
                        false
                   );
                    
                    return null;
                }
            };
            worker.execute();
            
            // enableStopDisableOthers();
            return;
        }
        
        // if the setup button is clicked
        if (event.getActionCommand().equals(SETUP_STRING)) {
            
            final SwingWorker<Void, Void> worker = 
                new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() {
                    // setup and stop
                    getRunController().run(
                        true,
                        false,
                        RunButtonPanel.this.getHighlightBox().isSelected(),
                        1,
                        false
                   );
                    
                    return null;
                }
            };
            worker.execute();
            
            // enableStopDisableOthers();
            return;
        }
        
        if (event.getActionCommand().equals(RUN_STRING)) {
            // final int response = getResponseFromResetDialog();
            
            final int sliderValue = 
                RunButtonPanel.this.getRunCountSlider().getValue();
            final boolean isForever = isForeverFromSliderPosition(sliderValue);
            if (isForever) {
                final SwingWorker<Void, Void> worker = 
                    new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() {
                        getRunController().run(
                            false,
                            true,
                            RunButtonPanel.
                                this.getHighlightBox().isSelected(),
                            1,
                            true
                        );
                        
                        // else, the user clicked the close box
                        return null;
                    }
                };
                worker.execute(); 
            } else {
                final int runTimes = valueFromSliderPosition(sliderValue);
                final SwingWorker<Void, Void> worker = 
                    new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() {
                        getRunController().run(
                            false,
                            true,
                            RunButtonPanel.
                                this.getHighlightBox().isSelected(),
                            runTimes,
                            false
                        );
                        
                        // else, the user clicked the close box
                        return null;
                    }
                };
                worker.execute(); 
            }
        }

        // if the stop button was clicked
        if (event.getActionCommand().equals(STOP_STRING)) {
            final SwingWorker<Void, Void> worker = 
                new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() {
                    getRunController().stop();
                    return null;
                }
            };
            worker.execute();
            
            // disableStopEnableOthers();
            return;
        }
    } 
    
    
    JButton getStopButton() {
        return this.stopButton;
    }
  
    /*
    JButton getResetButton() {
        return this.resetButton;
    }
    */
    
    JSlider getRunCountSlider() {
        return this.runCountSlider;
    }
    
    JButton getSetupButton() {
        return this.setupButton;
    }
    
    JButton getRunButton() {
        return this.runButton;
    }
    
    JCheckBox getHighlightBox() {
        return this.highlightBox;
    }
    
    RunController getRunController() {
        return this.runController;
    }
    
    
    /*
     * Should be called only from constructor.
     */
    private JCheckBox addCheckbox(final String name) {
        JCheckBox result = new JCheckBox(name);
        result.setVerticalTextPosition(SwingConstants.CENTER);
        this.checkboxPanel.add(result);
        return result;
    }
    
    
    /**
     * Should be called only from constructor, for thread safety.
     * 
     * Create a button with the given name, add it to the panel, and
     * return it to the caller.
     * 
     * @param name the text for the button
     * @return the button that was created
     */
    private JButton addButton(final String name) {
        JButton result = new JButton(name);
        result.setVerticalTextPosition(SwingConstants.CENTER);
        result.setActionCommand(name);
        result.addActionListener(this);
        this.buttonPanel.add(result);
        return result;
    }
}
